// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  unpaid
  past_due
  incomplete_expired
  incomplete
  canceled
  active
  trialing
}

enum PricingType {
  recurring
  one_time
}

enum PricingPlanInterval {
  year
  month
  week
  day
}

model Workspace {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  workspaceOwner String
  owner          User     @relation(fields: [workspaceOwner], references: [id], onDelete: Cascade)
  title          String
  iconId         String
  data           String?
  inTrash        String?
  logo           String?
  bannerUrl      String?
  folders        Folder[]
  files          File[]
  collaborator Collaborator[]
}

model Folder {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  title        String
  iconId       String
  data         String?
  inTrash      String?
  bannerUrl    String?
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  files       File[]
}

model File {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  title        String
  iconId       String
  data         String?
  inTrash      String?
  bannerUrl    String?
  workspaceId  String
  folderId     String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder       Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model User {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  fullname     String?
  avatarUrl    String?
  password     String
  workspaces   Workspace[]
  forgotPasswordToken String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken String?
  verifyTokenExpiry DateTime?
  isVerified Boolean @default(false)
  collaborator Collaborator[]
  subscription Subscription[]
  lastSeen     DateTime?
}

model Collaborator {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  workspaceId String
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  id               String   @id @default(uuid())
  stripeCustomerId String?
}

model Subscription {
  id                    String   @id
  userId                String
  status                SubscriptionStatus
  metadata             Json?
  priceId              String?
  quantity             Int?
  cancelAtPeriodEnd    Boolean?
  created              DateTime @default(now())
  currentPeriodStart   DateTime @default(now())
  currentPeriodEnd     DateTime @default(now())
  endedAt              DateTime @default(now())
  cancelAt             DateTime @default(now())
  canceledAt           DateTime @default(now())
  trialStart           DateTime @default(now())
  trialEnd             DateTime @default(now())
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  price                Price?    @relation(fields: [priceId], references: [id])
}

model Price {
  id                String   @id
  productId         String?
  active            Boolean?
  description       String?
  unitAmount        BigInt
  currency          String
  type              PricingType
  interval          PricingPlanInterval
  intervalCount     Int
  trialPeriodDays   Int?
  metadata          Json?
  product           Product? @relation(fields: [productId], references: [id])
  subscriptions     Subscription[]
}

model Product {
  id                String   @id
  active            Boolean?
  name              String
  description       String
  image             String?
  metadata          Json?
  prices            Price[]
}
